import { PatternBuilder, pb } from "@test/helpers/pattern-builder.js";
import { TestMatrix } from "@test/test-matrix/test-matrix.js";
import { CellMeta, Coord, Dimension } from "@test/test-matrix/types.js";
import { expect } from "vitest";
import { agentConfig, AgentConfigType } from "./__fixtures__/agent-configs.js";
import { tool as toolFn, ToolName } from "./__fixtures__/tools.js";
import { AgentCase, runMatrix } from "./helpers.js";

/**
 * ⚠️ **Generated Test Suite – Requires Manual Oversight**
 *
 * This test file contains test cases generated by a language model based on a
 * manually curated test matrix. The suite serves two main purposes:
 *
 * 1. To define the **minimum capabilities** that each supported model must meet.
 * 2. To act as a **benchmark** using more complex examples, verifying if smaller
 *    models can handle increased input complexity.
 *
 * 🛠️ These tests often succeed, but **require extra care**:
 * - Failures should be **inspected manually**.
 * - Resolution often involves **small updates** to agent/tool descriptions,
 *   instruction matchers, or expected tool selections.
 * - In some cases, the LLM may select a relevant tool that’s missing from the
 *   expected output.
 *
 * ✅ The motivation behind these tests is to **validate LLM functionality**
 * under increased input complexity before advancing to the next development phase.
 */

/**
 * ============================================================================
 *  UPDATE_AGENT_CONFIG · 3 × 3 × 3 TEST-MATRIX
 * ============================================================================
 *
 *  Three axes
 *  ───────────────────────────────────────────────────────────────────────────
 *  1. **EnvComplexity** – surrounding “noise” the LLM must parse.
 *        · STRAIGHTFORWARD – 1 related config, ≤ 3 tools, little clutter
 *        · NOISY           – 1 related and 1-4 unrelated configs, mid-sized tool palette
 *        · ENTANGLED       – ≥ 5 configs or overlapping scopes, 8-plus tools
 *
 *  2. **Trigger explicitness** – how loudly the user hints that an *existing*
 *     agent should be *updated* rather than created.
 *        · DIRECT     – user literally says “update / modify agent X …”
 *        · IMPLIED    – user’s request overlaps an agent but never names it
 *        · DISCOVERED – only by inspecting configs can the model infer that a
 *                       small tweak is enough
 *
 *  3. **Modification width** – scope of edits **without** changing purpose.
 *        · PATCH   – one surgical fix (time, typo)
 *        · AUGMENT – add/remove ≤ 1 tool *or* inject one new filter line
 *        · REFINE  – edits across > 1 key field (instructions **and** tools
 *                    and/or description) while mission remains constant
 *
 *  Below are three 3 × 3 tables (one per **EnvComplexity**) that map
 *  *Trigger explicitness* (rows) × *Modification width* (columns).
 *  Each cell states the cue *and* a shorthand of what the test should assert.
 *
 * ───────────────────────────────────────────────────────────────────────────
 *  STRAIGHTFORWARD ENVIRONMENT  – 1 related config, ≤ 3 tools, little clutter
 * ───────────────────────────────────────────────────────────────────────────
 * | Explicitness · Lvl | Trigger cue example                   | PATCH – tiny fix      | AUGMENT – 1 tool / filter  | REFINE – multi-field edit   |
 * |--------------------|---------------------------------------|-----------------------|-----------------------------|-----------------------------|
 * | DIRECT (L-1)       | “Update *flight_tracker_daily* …”     | schedule/typo fixed   | add *google_search*         | broaden crypto tracker text |
 * | IMPLIED (L-2)      | “Crypto tracker ping at noon?”        | reschedule            | add Osaka route filter      | tweak weekend digest scope  |
 * | DISCOVERED (L-3)   | Model spots patch opportunity         | sunrise via weather   | BTC 5 % / 30 min param      | AI & robotics digest revamp |
 *
 * ───────────────────────────────────────────────────────────────────────────
 *  NOISY ENVIRONMENT  – 1 related and 1-4 unrelated configs, mid-sized tool palette
 * ───────────────────────────────────────────────────────────────────────────
 * | Explicitness · Lvl | Trigger cue example                   | PATCH – tiny fix      | AUGMENT – 1 tool / filter  | REFINE – multi-field edit   |
 * |--------------------|---------------------------------------|-----------------------|-----------------------------|-----------------------------|
 * | DIRECT (L-1)       | “Shift weekend digest to 09 h.”        | time patched          | + news source               | description + filter tweak  |
 * | IMPLIED (L-2)      | User hints but not name agent         | param patch           | add podcast merge           | add Monday holidays & text  |
 * | DISCOVERED (L-3)   | Model chooses update vs. create       | minor instr swap      | add alert window param      | overhaul instructions + desc|
 *
 * ───────────────────────────────────────────────────────────────────────────
 *  ENTANGLED ENVIRONMENT  – ≥ 5 configs or overlapping scopes, 8-plus tools
 * ───────────────────────────────────────────────────────────────────────────
 * | Explicitness · Lvl | Trigger cue example                   | PATCH – tiny fix      | AUGMENT – 1 tool / filter  | REFINE – multi-field edit   |
 * |--------------------|---------------------------------------|-----------------------|-----------------------------|-----------------------------|
 * | DIRECT (L-1)       | “Correct typo in *arxiv_rl_daily*.”    | typo fixed            | + podcast_search            | + arxiv + wording overhaul  |
 * | IMPLIED (L-2)      | Overlap obvious, not named            | extend headline window| add SEC filter tool         | merge filings & news digest |
 * | DISCOVERED (L-3)   | Model infers tweak best               | param patch only      | add geo filter & tool       | tools + instr + desc all ok |
 * ───────────────────────────────────────────────────────────────────────────
 *
 *  **Test coverage rule:** create one minimal assertion per cell (27 total).
 *  All tests must validate:
 *    • `RESPONSE_TYPE === "UPDATE_AGENT_CONFIG"`
 *    • Correct `agent_type` chosen
 *    • Only intended fields edited; purpose unchanged
 */

const dimensions = [
  {
    name: "EnvComplexity",
    description: "surrounding “noise” the LLM must parse",
    values: [
      {
        name: "STRAIGHTFORWARD",
        description: "0 existing configs, ≤ 3 tools, little clutter",
      },
      {
        name: "NOISY",
        description: "1-4 unrelated configs, mid-sized tool palette",
      },
      {
        name: "ENTANGLED",
        description:
          "≥ 5 configs or overlapping scopes, 8-plus tools plus larger tool palette (“dense ecosystem”)",
      },
    ],
  },
  {
    name: "TriggerExplicitness",
    description:
      "how loudly the user hints that an *existing* agent should be *updated* rather than created.",
    values: [
      {
        name: "DIRECT",
        description: "user literally says “update / modify agent X …”",
      },
      {
        name: "IMPLIED",
        description: "user’s request overlaps an agent but never names it",
      },
      {
        name: "DISCOVERED",
        description:
          "only by inspecting configs can the model infer that a small tweak is enough",
      },
    ],
  },
  {
    name: "ModificationWidth",
    description: "scope of edits **without** changing purpose.",
    values: [
      {
        name: "PATCH",
        description: "one surgical fix (time, typo)",
      },
      {
        name: "AUGMENT",
        description: "add/remove ≤ 1 tool *or* inject one new filter line",
      },
      {
        name: "REFINE",
        description:
          "edits across > 1 key field (instructions **and** tools and/or description) while mission remains constant",
      },
    ],
  },
] as const satisfies Dimension[];

export const m = new TestMatrix<typeof dimensions, AgentCase>(dimensions);

const testCases: {
  coord: Coord<typeof dimensions>;
  meta: CellMeta<typeof dimensions>;
  cases: {
    input: string;
    availableTools: ToolName[];
    existingAgentConfigs: AgentConfigType[];
    expected: {
      agent_type: AgentConfigType;
      tools?: ToolName[];
      instructions?: PatternBuilder;
      description?: PatternBuilder;
    };
  }[];
}[] = [
  /* ─────────────────────────── STRAIGHTFORWARD ─────────────────────────── */
  {
    /* DIRECT · PATCH  ─ “Move alerts to 08:00” */
    coord: ["STRAIGHTFORWARD", "DIRECT", "PATCH"],
    meta: [
      {
        dimension: "EnvComplexity",
        description: "0 cfg, ≤ 3 tools, minimal clutter",
      },
      {
        dimension: "TriggerExplicitness",
        description: "“Update *flight_tracker_daily* …”",
      },
      {
        dimension: "ModificationWidth",
        description: "schedule/typo fixed",
      },
    ],
    cases: [
      {
        input:
          "Move my flight_tracker_weekly alerts to on every Tuesday at 8 AM  morning.",
        availableTools: ["flight_price_tracker"],
        existingAgentConfigs: ["flight_price_tracker_weekly"],
        expected: {
          agent_type: "flight_price_tracker_weekly",
          instructions: pb().text("Tuesday").time(8),
        },
      },
    ],
  },
  {
    /* DIRECT · AUGMENT  ─ add google_search for opening hours */
    coord: ["STRAIGHTFORWARD", "DIRECT", "AUGMENT"],
    meta: [
      {
        dimension: "EnvComplexity",
        description: "0 cfg, ≤ 3 tools, minimal clutter",
      },
      {
        dimension: "TriggerExplicitness",
        description: "“Update *flight_tracker_daily* …”",
      },
      {
        dimension: "ModificationWidth",
        description: "add *google_search*",
      },
    ],
    cases: [
      {
        input:
          "Please update the historical_sites_search agent to also use google_search so it can include opening hours.",
        availableTools: ["google_search", "historical_sites_search_api"],
        existingAgentConfigs: ["historical_sites_search"],
        expected: {
          agent_type: "historical_sites_search",
          tools: ["google_search", "historical_sites_search_api"],
          instructions: pb().alt("opening hours", "hours"),
        },
      },
    ],
  },
  {
    /* DIRECT · REFINE ─ broaden to ADA + tweak wording */
    coord: ["STRAIGHTFORWARD", "DIRECT", "REFINE"],
    meta: [
      {
        dimension: "EnvComplexity",
        description: "0 cfg, ≤ 3 tools, minimal clutter",
      },
      {
        dimension: "TriggerExplicitness",
        description: "“Update *flight_tracker_daily* …”",
      },
      {
        dimension: "ModificationWidth",
        description: "broaden crypto tracker text",
      },
    ],
    cases: [
      {
        input:
          "Expand the crypto_price_tracker_hourly agent to track ADA as well and update its description accordingly.",
        availableTools: ["crypto_price_feed"],
        existingAgentConfigs: ["crypto_price_tracker_hourly"],
        expected: {
          agent_type: "crypto_price_tracker_hourly",
          instructions: pb().alt("ADA", "Cardano"),
        },
      },
    ],
  },
  /* ─────────────────────────── STRAIGHTFORWARD ─────────────────────────── */
  /* IMPLIED · PATCH ─ reschedule                                                       */
  {
    coord: ["STRAIGHTFORWARD", "IMPLIED", "PATCH"],
    meta: [
      { dimension: "EnvComplexity", description: "1 related cfg, ≤ 3 tools" },
      {
        dimension: "TriggerExplicitness",
        description: "User hints but doesn’t name agent",
      },
      { dimension: "ModificationWidth", description: "reschedule to noon" },
    ],
    cases: [
      {
        input:
          "Could you have my crypto price alerts arrive exactly at 12:00 each day instead of every hour?",
        availableTools: ["crypto_price_feed"],
        existingAgentConfigs: ["crypto_price_tracker_hourly"],
        expected: {
          agent_type: "crypto_price_tracker_hourly",
          instructions: pb().time(12),
        },
      },
    ],
  },
  /* IMPLIED · AUGMENT ─ inject Osaka route filter                                       */
  {
    coord: ["STRAIGHTFORWARD", "IMPLIED", "AUGMENT"],
    meta: [
      { dimension: "EnvComplexity", description: "1 related cfg, ≤ 3 tools" },
      {
        dimension: "TriggerExplicitness",
        description: "Overlap obvious, agent not named",
      },
      {
        dimension: "ModificationWidth",
        description: "add Osaka route filter line",
      },
    ],
    cases: [
      {
        input:
          "These daily fare alerts are great—could you also watch prices from Prague to Osaka?",
        availableTools: ["flight_price_tracker"],
        existingAgentConfigs: ["flight_tracker_daily"],
        expected: {
          agent_type: "flight_tracker_daily",
          instructions: pb().alt("Osaka", "KIX"),
        },
      },
    ],
  },
  /* IMPLIED · REFINE ─ include Monday on public holidays                                 */
  {
    coord: ["STRAIGHTFORWARD", "IMPLIED", "REFINE"],
    meta: [
      { dimension: "EnvComplexity", description: "1 related cfg, ≤ 3 tools" },
      {
        dimension: "TriggerExplicitness",
        description: "User hints, agent not named",
      },
      {
        dimension: "ModificationWidth",
        description: "description + Monday filter",
      },
    ],
    cases: [
      {
        input:
          "If Monday is a public holiday, please have the weekend family-events list cover Monday too and update its blurb.",
        availableTools: ["city_events_search"],
        existingAgentConfigs: ["city_events_weekend"],
        expected: {
          agent_type: "city_events_weekend",
          instructions: pb().alt("Monday", "public holiday"),
          description: pb().alt("Long weekend", "holiday"),
        },
      },
    ],
  },
  /* DISCOVERED · PATCH ─ fix ‘reinforcment’ typo                                         */
  {
    coord: ["STRAIGHTFORWARD", "DISCOVERED", "PATCH"],
    meta: [
      { dimension: "EnvComplexity", description: "1 related cfg, ≤ 3 tools" },
      { dimension: "TriggerExplicitness", description: "Model spots typo fix" },
      { dimension: "ModificationWidth", description: "typo patched" },
    ],
    cases: [
      {
        input:
          "The daily RL digest keeps spelling it “reinforcment learning” — tiny typo to fix.",
        availableTools: ["arxiv_search"],
        existingAgentConfigs: ["arxiv_rl_daily"],
        expected: {
          agent_type: "arxiv_rl_daily",
          instructions: pb().alt("reinforcement learning"),
        },
      },
    ],
  },
  /* DISCOVERED · AUGMENT ─ tighten threshold & interval                                  */
  {
    coord: ["STRAIGHTFORWARD", "DISCOVERED", "AUGMENT"],
    meta: [
      { dimension: "EnvComplexity", description: "1 related cfg, ≤ 3 tools" },
      {
        dimension: "TriggerExplicitness",
        description: "Model infers tweak best",
      },
      { dimension: "ModificationWidth", description: "BTC 5 % / 30 min param" },
    ],
    cases: [
      {
        input:
          "Let’s raise the crypto alert threshold to 5 % and check every 30 minutes.",
        availableTools: ["crypto_price_feed"],
        existingAgentConfigs: ["crypto_price_tracker_hourly"],
        expected: {
          agent_type: "crypto_price_tracker_hourly",
          instructions: pb().alt("5 %", "30"),
        },
      },
    ],
  },
  /* DISCOVERED · REFINE ─ broaden RL digest to robotics                                  */
  {
    coord: ["STRAIGHTFORWARD", "DISCOVERED", "REFINE"],
    meta: [
      { dimension: "EnvComplexity", description: "1 related cfg, ≤ 3 tools" },
      {
        dimension: "TriggerExplicitness",
        description: "Model infers broader scope",
      },
      { dimension: "ModificationWidth", description: "instr + desc update" },
    ],
    cases: [
      {
        input:
          "Could the daily RL digest also include cs.RO robotics papers that mention reinforcement learning and note that in its description?",
        availableTools: ["arxiv_search"],
        existingAgentConfigs: ["arxiv_rl_daily"],
        expected: {
          agent_type: "arxiv_rl_daily",
          instructions: pb().alt("cs.RO", "robotics"),
          description: pb().alt("robotics"),
        },
      },
    ],
  },

  /* ─────────────────────────────── NOISY ──────────────────────────────── */
  /* DIRECT · PATCH – shift weekend digest to 09 h                          */
  {
    coord: ["NOISY", "DIRECT", "PATCH"],
    meta: [
      {
        dimension: "EnvComplexity",
        description: "1 related + unrelated cfgs, 4-6 tools",
      },
      { dimension: "TriggerExplicitness", description: "User says “shift …”" },
      { dimension: "ModificationWidth", description: "time patched" },
    ],
    cases: [
      {
        input:
          "Shift the weekend family-events digest to 09:00 on Thursdays, please.",
        availableTools: ["city_events_search", "news_search"],
        existingAgentConfigs: ["city_events_weekend", "news_headlines"],
        expected: {
          agent_type: "city_events_weekend",
          instructions: pb().time(9),
        },
      },
    ],
  },
  /* DIRECT · AUGMENT – add google_search                                  */
  {
    coord: ["NOISY", "DIRECT", "AUGMENT"],
    meta: [
      { dimension: "EnvComplexity", description: "mid-sized palette" },
      {
        dimension: "TriggerExplicitness",
        description: "User explicitly names agent",
      },
      { dimension: "ModificationWidth", description: "+ news source tool" },
    ],
    cases: [
      {
        input:
          "Please modify the news_headlines agent so it uses google_search as well.",
        availableTools: ["news_search", "google_search", "podcast_search"],
        existingAgentConfigs: [
          "news_headlines",
          "crypto_price_tracker_hourly",
          "scifi_movies_weekly",
        ],
        expected: {
          agent_type: "news_headlines",
          tools: ["news_search", "google_search"],
          instructions: pb().alt("Google", "google_search"),
        },
      },
    ],
  },
  /* DIRECT · REFINE – description + filter tweak                          */
  {
    coord: ["NOISY", "DIRECT", "REFINE"],
    meta: [
      { dimension: "EnvComplexity", description: "mid-sized palette" },
      { dimension: "TriggerExplicitness", description: "User names agent" },
      { dimension: "ModificationWidth", description: "instr & desc edited" },
    ],
    cases: [
      {
        input:
          "Update the city_events_weekend agent: rename it to ‘Weekend & Holiday family events’ and filter out events priced above €50.",
        availableTools: ["city_events_search"],
        existingAgentConfigs: [
          "city_events_weekend",
          "podcast_ai_weekly",
          "historical_sites_search",
        ],
        expected: {
          agent_type: "city_events_weekend",
          instructions: pb().price(50, "€"),
          description: pb().alt("Holiday", "long weekend"),
        },
      },
    ],
  },
  /* IMPLIED · PATCH – param patch                                          */
  {
    coord: ["NOISY", "IMPLIED", "PATCH"],
    meta: [
      { dimension: "EnvComplexity", description: "mid-sized palette" },
      {
        dimension: "TriggerExplicitness",
        description: "User hints but not name agent",
      },
      { dimension: "ModificationWidth", description: "daily → 20:00" },
    ],
    cases: [
      {
        input:
          "The fare check is too frequent—just look once each evening at 20:00.",
        availableTools: [
          "flight_price_tracker",
          "movie_db_search",
          "news_search",
        ],
        existingAgentConfigs: ["flight_tracker_daily", "scifi_movies_weekly"],
        expected: {
          agent_type: "flight_tracker_daily",
          instructions: pb().time(20),
        },
      },
    ],
  },
  /* IMPLIED · AUGMENT – add SEC filings tool                               */
  {
    coord: ["NOISY", "IMPLIED", "AUGMENT"],
    meta: [
      { dimension: "EnvComplexity", description: "mid-sized palette" },
      { dimension: "TriggerExplicitness", description: "agent not named" },
      { dimension: "ModificationWidth", description: "+ sec_filings_search" },
    ],
    cases: [
      {
        input:
          "It’d be great if the headlines digest could also pull relevant SEC filings for companies mentioned.",
        availableTools: ["news_search", "sec_filings_search"],
        existingAgentConfigs: ["news_headlines", "crypto_price_tracker_hourly"],
        expected: {
          agent_type: "news_headlines",
          tools: ["news_search", "sec_filings_search"],
          instructions: pb().alt("SEC", "filings"),
        },
      },
    ],
  },
  /* IMPLIED · REFINE – add Monday holidays & text                          */
  {
    coord: ["NOISY", "IMPLIED", "REFINE"],
    meta: [
      { dimension: "EnvComplexity", description: "mid-sized palette" },
      { dimension: "TriggerExplicitness", description: "not named" },
      { dimension: "ModificationWidth", description: "instr + desc edits" },
    ],
    cases: [
      {
        input:
          "Could the weekend events list include Monday on long weekends and update the description accordingly?",
        availableTools: ["city_events_search"],
        existingAgentConfigs: [
          "city_events_weekend",
          "flight_price_tracker_weekly",
        ],
        expected: {
          agent_type: "city_events_weekend",
          instructions: pb().alt("Monday", "holiday"),
          description: pb().alt("Long weekend", "holiday"),
        },
      },
    ],
  },
  /* DISCOVERED · PATCH – minor instr swap                                   */
  {
    coord: ["NOISY", "DISCOVERED", "PATCH"],
    meta: [
      { dimension: "EnvComplexity", description: "mid-sized palette" },
      { dimension: "TriggerExplicitness", description: "model chooses patch" },
      { dimension: "ModificationWidth", description: "spelling fix" },
    ],
    cases: [
      {
        input: "Your sci-fi digest spelled ‘synopsys’; can that be corrected?",
        availableTools: ["movie_db_search"],
        existingAgentConfigs: [
          "scifi_movies_weekly",
          "news_headlines",
          "phrase_generator",
        ],
        expected: {
          agent_type: "scifi_movies_weekly",
          instructions: pb().alt("synopsis"),
        },
      },
    ],
  },
  /* DISCOVERED · AUGMENT – add alert window param                           */
  {
    coord: ["NOISY", "DISCOVERED", "AUGMENT"],
    meta: [
      { dimension: "EnvComplexity", description: "mid-sized palette" },
      { dimension: "TriggerExplicitness", description: "model adds param" },
      { dimension: "ModificationWidth", description: "night-quiet window" },
    ],
    cases: [
      {
        input:
          "Between 22:00 and 06:00 only push tornado *warnings*, not watches.",
        availableTools: ["weather_alert_feed"],
        existingAgentConfigs: [
          "weather_tornado_immediate",
          "crypto_price_tracker_hourly",
        ],
        expected: {
          agent_type: "weather_tornado_immediate",
          instructions: pb().alt("22:00", "06:00"),
        },
      },
    ],
  },
  /* DISCOVERED · REFINE – overhaul instructions + desc                      */
  {
    coord: ["NOISY", "DISCOVERED", "REFINE"],
    meta: [
      { dimension: "EnvComplexity", description: "mid-sized palette" },
      { dimension: "TriggerExplicitness", description: "model infers refine" },
      { dimension: "ModificationWidth", description: "tools + text updated" },
    ],
    cases: [
      {
        input:
          "Make the historical sites agent smarter: let it query Google too and say so in the description.",
        availableTools: ["historical_sites_search_api", "google_search"],
        existingAgentConfigs: [
          "historical_sites_search",
          "news_headlines",
          "crypto_price_tracker_hourly",
          "scifi_movies_weekly",
        ],
        expected: {
          agent_type: "historical_sites_search",
          tools: ["historical_sites_search_api", "google_search"],
          instructions: pb().alt("google_search", "Google"),
          description: pb().alt("Google", "search"),
        },
      },
    ],
  },

  /* ───────────────────────────── ENTANGLED ─────────────────────────────── */
  /* DIRECT · PATCH – typo in arxiv_rl_daily                                 */
  {
    coord: ["ENTANGLED", "DIRECT", "PATCH"],
    meta: [
      { dimension: "EnvComplexity", description: "≥ 5 cfgs, dense ecosystem" },
      { dimension: "TriggerExplicitness", description: "User names agent" },
      { dimension: "ModificationWidth", description: "typo fixed" },
    ],
    cases: [
      {
        input:
          "Correct the description in arxiv_rl_daily to say “RL & ML arXiv digest.”",
        availableTools: ["arxiv_search"],
        existingAgentConfigs: [
          "arxiv_rl_daily",
          "crypto_price_tracker_hourly",
          "flight_price_tracker_weekly",
          "news_headlines",
          "historical_sites_search",
          "scifi_movies_weekly",
        ],
        expected: {
          agent_type: "arxiv_rl_daily",
          description: pb().alt("ML", "RL & ML"),
        },
      },
    ],
  },
  /* DIRECT · AUGMENT – + podcast_search                                     */
  {
    coord: ["ENTANGLED", "DIRECT", "AUGMENT"],
    meta: [
      { dimension: "EnvComplexity", description: "dense ecosystem" },
      {
        dimension: "TriggerExplicitness",
        description: "User explicitly names agent",
      },
      { dimension: "ModificationWidth", description: "add podcast_search" },
    ],
    cases: [
      {
        input:
          "Update arxiv_rl_daily so it also surfaces podcast episodes using podcast_search.",
        availableTools: ["arxiv_search", "podcast_search", "news_search"],
        existingAgentConfigs: [
          "arxiv_rl_daily",
          "podcast_ai_weekly",
          "news_headlines",
          "crypto_price_tracker_hourly",
          "flight_price_tracker_weekly",
          "weather_tornado_immediate",
        ],
        expected: {
          agent_type: "arxiv_rl_daily",
          tools: ["arxiv_search", "podcast_search"],
          instructions: pb().alt("podcast", "episodes"),
        },
      },
    ],
  },
  /* DIRECT · REFINE – cs.AI + wording overhaul                               */
  {
    coord: ["ENTANGLED", "DIRECT", "REFINE"],
    meta: [
      { dimension: "EnvComplexity", description: "dense ecosystem" },
      { dimension: "TriggerExplicitness", description: "User names agent" },
      { dimension: "ModificationWidth", description: "multi-field" },
    ],
    cases: [
      {
        input:
          "Refresh arxiv_rl_daily: include cs.AI papers, update its description, keep schedule.",
        availableTools: ["arxiv_search"],
        existingAgentConfigs: [
          "arxiv_rl_daily",
          "news_headlines",
          "phrase_generator",
          "crypto_price_tracker_hourly",
          "flight_tracker_daily",
          "weather_tornado_immediate",
        ],
        expected: {
          agent_type: "arxiv_rl_daily",
          instructions: pb().alt("cs.AI", "cs.LG"),
          description: pb().alt("AI", "RL & AI"),
        },
      },
    ],
  },
  /* IMPLIED · PATCH – extend headline window                                 */
  {
    coord: ["ENTANGLED", "IMPLIED", "PATCH"],
    meta: [
      { dimension: "EnvComplexity", description: "dense ecosystem" },
      { dimension: "TriggerExplicitness", description: "not named agent" },
      { dimension: "ModificationWidth", description: "headline window 72 h" },
    ],
    cases: [
      {
        input: "The news digest is too short—can it cover the last 72 hours?",
        availableTools: ["news_search", "google_search"],
        existingAgentConfigs: [
          "news_headlines",
          "arxiv_rl_daily",
          "crypto_price_tracker_hourly",
          "historical_sites_search",
          "flight_price_tracker_weekly",
          "podcast_ai_weekly",
        ],
        expected: {
          agent_type: "news_headlines",
          instructions: pb().alt("72", "3 days"),
        },
      },
    ],
  },
  /* IMPLIED · AUGMENT – add SEC tool                                         */
  {
    coord: ["ENTANGLED", "IMPLIED", "AUGMENT"],
    meta: [
      { dimension: "EnvComplexity", description: "dense ecosystem" },
      { dimension: "TriggerExplicitness", description: "agent not named" },
      { dimension: "ModificationWidth", description: "+ sec_filings_search" },
    ],
    cases: [
      {
        input: "I’d like corporate filings alongside the business headlines.",
        availableTools: [
          "news_search",
          "sec_filings_search",
          "google_search",
          "podcast_search",
        ],
        existingAgentConfigs: [
          "news_headlines",
          "crypto_price_tracker_hourly",
          "flight_price_tracker_weekly",
          "phrase_generator",
          "scifi_movies_weekly",
        ],
        expected: {
          agent_type: "news_headlines",
          tools: ["news_search", "sec_filings_search"],
          instructions: pb().alt("filings", "SEC"),
        },
      },
    ],
  },
  /* IMPLIED · REFINE – broaden sci-fi digest to streaming releases */
  {
    coord: ["ENTANGLED", "IMPLIED", "REFINE"],
    meta: [
      { dimension: "EnvComplexity", description: "dense ecosystem" },
      { dimension: "TriggerExplicitness", description: "agent not named" },
      { dimension: "ModificationWidth", description: "tool + instr + desc" },
    ],
    cases: [
      {
        input:
          "It’d be awesome if my weekly sci-fi movie digest could also cover streaming premieres and mention that in its description.",
        availableTools: ["movie_db_search", "google_search"],
        existingAgentConfigs: [
          "scifi_movies_weekly",
          "news_headlines",
          "crypto_price_tracker_hourly",
          "flight_price_tracker_weekly",
          "historical_sites_search",
          "phrase_generator",
        ],
        expected: {
          agent_type: "scifi_movies_weekly",
          tools: ["movie_db_search", "google_search"], // ← new tool added
          instructions: pb().alt("streaming", "premiere"), // ← instructions updated
          description: pb().alt("streaming", "premiere"), // ← description updated
        },
      },
    ],
  },
  /* DISCOVERED · PATCH – quiz options count                                     */
  {
    coord: ["ENTANGLED", "DISCOVERED", "PATCH"],
    meta: [
      { dimension: "EnvComplexity", description: "dense ecosystem" },
      { dimension: "TriggerExplicitness", description: "model sees tweak" },
      { dimension: "ModificationWidth", description: "single param change" },
    ],
    cases: [
      {
        input:
          "Could the word-of-the-day quiz offer four options instead of three?",
        availableTools: ["phrase_generator"],
        existingAgentConfigs: [
          "phrase_generator",
          "news_headlines",
          "crypto_price_tracker_hourly",
          "historical_sites_search",
          "scifi_movies_weekly",
          "flight_price_tracker_weekly",
        ],
        expected: {
          agent_type: "phrase_generator",
          instructions: pb().alt("four", "4"),
        },
      },
    ],
  },
  /* DISCOVERED · AUGMENT – geo filter & google                                 */
  {
    coord: ["ENTANGLED", "DISCOVERED", "AUGMENT"],
    meta: [
      { dimension: "EnvComplexity", description: "dense ecosystem" },
      { dimension: "TriggerExplicitness", description: "model adds geo tool" },
      {
        dimension: "ModificationWidth",
        description: "add google_search + text",
      },
    ],
    cases: [
      {
        input:
          "Only alert me about the price when fares depart within 300 km—use Google to find nearby airports.",
        availableTools: ["flight_price_tracker", "google_maps"],
        existingAgentConfigs: [
          "flight_price_tracker_weekly",
          "news_headlines",
          "crypto_price_tracker_hourly",
          "historical_sites_search",
          "phrase_generator",
          "arxiv_rl_daily",
          "scifi_movies_weekly",
        ],
        expected: {
          agent_type: "flight_price_tracker_weekly",
          tools: ["flight_price_tracker", "google_maps"],
          instructions: pb().alt("300", "km"),
        },
      },
    ],
  },
  /* DISCOVERED · REFINE – AI media digest                                        */
  {
    coord: ["ENTANGLED", "DISCOVERED", "REFINE"],
    meta: [
      { dimension: "EnvComplexity", description: "dense ecosystem" },
      {
        dimension: "TriggerExplicitness",
        description: "model overhauls agent",
      },
      { dimension: "ModificationWidth", description: "tools + instr + desc" },
    ],
    cases: [
      {
        input:
          "Turn the weekly AI podcast digest into a broader AI media digest that also lists major news headlines—keep the Friday 18:00 slot.",
        availableTools: ["podcast_search", "news_search"],
        existingAgentConfigs: [
          "podcast_ai_weekly",
          "news_headlines",
          "crypto_price_tracker_hourly",
          "historical_sites_search",
          "flight_price_tracker_weekly",
          "phrase_generator",
        ],
        expected: {
          agent_type: "podcast_ai_weekly",
          tools: ["podcast_search", "news_search"],
          instructions: pb().alt("news", "headlines"),
          description: pb().alt("media", "digest"),
        },
      },
    ],
  },
];

for (const { coord, meta, cases } of testCases) {
  m.add(coord, {
    meta,
    value: cases.map(
      ({
        input,
        expected: { tools, agent_type, instructions, description },
        existingAgentConfigs,
        availableTools,
      }) => ({
        input,
        expected: {
          RESPONSE_TYPE: "UPDATE_AGENT_CONFIG" as const,
          RESPONSE_UPDATE_AGENT_CONFIG: {
            agent_type: expect.any(String),
            ...(tools ? { tools: expect.arrayContaining(tools) } : {}),
          },
        },
        data: {
          availableTools: availableTools.map((tool) => toolFn(tool)),
          existingAgentConfigs: existingAgentConfigs.map((ac) =>
            agentConfig(ac),
          ),
        },
        assert: (parsed) => {
          expect(parsed.RESPONSE_UPDATE_AGENT_CONFIG!.agent_type).toBe(
            agent_type,
          );
          if (instructions) {
            expect(
              parsed.RESPONSE_UPDATE_AGENT_CONFIG!.instructions,
            ).toMatchPattern(instructions);
          }

          if (description) {
            expect(
              parsed.RESPONSE_UPDATE_AGENT_CONFIG!.description,
            ).toMatchPattern(description);
          }
        },
      }),
    ),
  });
}
/* kick off the generator */
runMatrix(m);
